
#include <iostream>

void foo(int frodo, int &samwise);


Code #2: Write a function stub for the function foo() as described in the previous question.

#include <iostream>

void foo(int frodo, int &samwise) {
    // Function body (implementation) will go here

    // For now, let's print the values of frodo and samwise
    std::cout << "frodo: " << frodo << std::endl;
    std::cout << "samwise (before modification): " << samwise << std::endl;

    // Modify the value of samwise (for example, doubling it)
    samwise *= 2;

    std::cout << "samwise (after modification): " << samwise << std::endl;
}


Code #3: Write a declaration for a string variable named gandalf as a local variable. Indicate the context of the declaration to demonstrate that it is, in fact, a local variable.

#include <iostream>
#include <string>

void someFunction() {
    // Declaration of a local string variable named gandalf
    std::string gandalf = "You shall not pass!";

    // Additional code using the gandalf variable
    std::cout << "Gandalf says: " << gandalf << std::endl;
}

int main() {
    // Call the function where gandalf is declared
    someFunction();

    // The gandalf variable is not accessible outside the someFunction scope

    return 0;
}


Code #4: Write a declaration for a string variable named balrog as a non-local variable (visible through most of the code file). Indicate the context of the declaration to demonstrate that it is, in fact, an extern variable.

#include <iostream>
#include <string>

void someFunction() {
    // Declaration of a local string variable named gandalf
    std::string gandalf = "You shall not pass!";

    // Additional code using the gandalf variable
    std::cout << "Gandalf says: " << gandalf << std::endl;
}

// Declaration of a non-local (extern) string variable named balrog
extern std::string balrog;

int main() {
    // Call the function where gandalf is declared
    someFunction();

    // Use the non-local (extern) variable balrog
    std::cout << "The Balrog says: " << balrog << std::endl;

    return 0;
}

// Definition of the non-local (extern) variable balrog
std::string balrog = "You shall not pass either!";


Code #5: Write a declaration for a string variable named int. Why won't the C++ compiler like this?

Attempting to declare a variable with the name int in C++ is not allowed because int is a keyword in the C++ language. Keywords are reserved words that have special meanings in the language, and they cannot be used as identifiers (such as variable names).

#include <iostream>
#include <string>

int main() {
    std::string int = "This won't work!";
    std::cout << int << std::endl;
    return 0;
}






Project #7.1: Write a program that will read a sequence of numbers from the keyboard, and display the minimum, maximum, average, and range of the entered values. Make the input step "fool-proof".


#include <iostream>

int main() {
    int num;
    int sum = 0;
    int count = 0;
    int minimum, maximum;

    std::cout << "Enter a sequence of numbers. To finish, enter a non-numeric character: " << std::endl;

    // Check if the first input is valid
    if (std::cin >> num) {
        minimum = maximum = num;
        sum += num;
        count++;

        while (std::cin >> num) {
            // Update statistics
            sum += num;
            count++;
            if (num < minimum) {
                minimum = num;
            }
            if (num > maximum) {
                maximum = num;
            }
        }

        // Calculate average and range
        double average = static_cast<double>(sum) / count;
        int range = maximum - minimum;

        // Display results
        std::cout << "Minimum: " << minimum << std::endl;
        std::cout << "Maximum: " << maximum << std::endl;
        std::cout << "Average: " << average << std::endl;
        std::cout << "Range: " << range << std::endl;
    }
    else {
        std::cerr << "No valid numbers entered." << std::endl;
        return 1; // Return error code
    }

    return 0; // Return success code
}



roject #7.2: Extend calculate.cpp into a six-function calculator, as follows:
Add a factorial() operation that, given an integer n, computes n! = 1 * 2 * ... * (n-1) * n.
Redesign Power() so that it handles negative exponents.


#include <iostream>
#include <cmath>  // For pow function

int Add(int a, int b) {
    return a + b;
}

int Subtract(int a, int b) {
    return a - b;
}

int Multiply(int a, int b) {
    return a * b;
}

int Divide(int a, int b) {
    if (b != 0) {
        return a / b;
    } else {
        std::cerr << "Error: Division by zero." << std::endl;
        return 0;  // You can handle the error in a way that suits your needs
    }
}

int Power(int base, int exponent) {
    return static_cast<int>(pow(base, exponent));
}

int Factorial(int n) {
    if (n < 0) {
        std::cerr << "Error: Factorial is not defined for negative numbers." << std::endl;
        return 0;  // You can handle the error in a way that suits your needs
    }

    int result = 1;
    for (int i = 1; i <= n; ++i) {
        result *= i;
    }
    return result;
}

int main() {
    int num1, num2;
    char operation;

    std::cout << "Enter two numbers: ";
    std::cin >> num1 >> num2;

    std::cout << "Enter an operation (+, -, *, /, ^, !): ";
    std::cin >> operation;

    int result;

    switch (operation) {
        case '+':
            result = Add(num1, num2);
            break;
        case '-':
            result = Subtract(num1, num2);
            break;
        case '*':
            result = Multiply(num1, num2);
            break;
        case '/':
            result = Divide(num1, num2);
            break;
        case '^':
            result = Power(num1, num2);
            break;
        case '!':
            result = Factorial(num1);
            break;
        default:
            std::cerr << "Error: Invalid operation." << std::endl;
            return 1;  // Return error code
    }

    std::cout << "Result: " << result << std::endl;

    return 0;  // Return success code
}






